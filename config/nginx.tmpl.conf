worker_processes auto;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
  lua_package_path '/usr/local/openresty/lualib/?.lua;;';
  resolver ${DNS_RESOLVER};
  include /etc/nginx/conf.d/*.conf;

  # cache for discovery metadata documents
  lua_shared_dict discovery 1m;
  # cache for JWKs
  lua_shared_dict jwks 1m;
  
  server {
    listen       ${PORT} default_server;
    listen       [::]:${PORT} default_server;
    root         /usr/share/nginx/html;

    # I disbled caching so the browser won't cache the site.
    expires           0;
    add_header        Cache-Control private;
    
    # detect if mobile user
    set $is_mobile_useragent is_desktop;

    if ($http_user_agent ~* "(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino") {
      set $is_mobile_useragent is_mobile;
    }

    if ($http_user_agent ~* "^(1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-)") {
      set $is_mobile_useragent is_mobile;
    }
    # location without authN
    location ^~ /b78292ec-175a-411d-ad1b-d9ab70e98a7e/ {
      proxy_pass ${REDIRECT_URI_SCHEME}://backend;
    }

    # all other locations need an authentication
    location ^~ / {
      # is_desktop authn with different IdP client registration depending on mobile or desktop user-agent
      if ($is_mobile_useragent = is_mobile) {
      # path not needing authentication
        access_by_lua_block {
          local opts = {
            redirect_uri = "${REDIRECT_URI}",
            discovery = "${DISCOVERY_URL}",
            -- configuration to authN towards the OIDC provider 
            client_id = "${CLIENT_ID}",
            client_secret = "${CLIENT_SECRET}",

            redirect_uri_scheme = "${REDIRECT_URI_SCHEME}",
            logout_path = "${LOGOUT_PATH}",
            redirect_after_logout_uri = "${AFTER_LOGOUT_URI}",
            redirect_after_logout_with_id_token_hint = false,
            -- post_logout_redirect_uri = "http://backend:8080/logoutSuccessful",
            session_contents = {id_token=true, access_token=true}
          }
          -- call introspect for OAuth 2.0 Bearer Access Token validation
          local res, err = require("resty.openidc").authenticate(opts)

          if err then
            ngx.status = 403
            ngx.say(err)
            ngx.exit(ngx.HTTP_FORBIDDEN)
          end
          -- forwarding token to backend
          ngx.req.set_header("Authorization", "Bearer " .. res.access_token)
        } #close access_by_lua_block 
      } # close if mobile user
      # else, if not mobile user
      if ($is_mobile_useragent = is_desktop) {
         # path not needing authentication
        access_by_lua_block {
          local opts = {
            redirect_uri = "${REDIRECT_URI}",
            discovery = "${DISCOVERY_URL}",
            -- configuration to authN towards the OIDC provider 
            client_id = "dcs-fileserver-desktop",
            client_secret = "${CLIENT_SECRET}",

            redirect_uri_scheme = "${REDIRECT_URI_SCHEME}",
            logout_path = "${LOGOUT_PATH}",
            redirect_after_logout_uri = "${AFTER_LOGOUT_URI}",
            redirect_after_logout_with_id_token_hint = false,
            -- post_logout_redirect_uri = "http://backend:8080/logoutSuccessful",
            session_contents = {id_token=true, access_token=true}
          }
          -- call introspect for OAuth 2.0 Bearer Access Token validation
          local res, err = require("resty.openidc").authenticate(opts)

          if err then
            ngx.status = 403
            ngx.say(err)
            ngx.exit(ngx.HTTP_FORBIDDEN)
          end
          -- forwarding token to backend
          ngx.req.set_header("Authorization", "Bearer " .. res.access_token)
        } #close  access_by_lua_block 
      } # close if desktop user
      proxy_pass ${REDIRECT_URI_SCHEME}://backend;
    } # close location with authN
  } # close server
  upstream backend {
          server   ${BACKEND_HOST};
  }
} # close http