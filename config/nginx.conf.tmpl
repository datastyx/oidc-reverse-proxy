worker_processes auto;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
  lua_package_path '/usr/local/openresty/lualib/?.lua;;';
  resolver ${DNS_RESOLVER};
  include /etc/nginx/conf.d/*.conf;

  # cache for discovery metadata documents
  lua_shared_dict discovery 1m;
  # cache for JWKs
  lua_shared_dict jwks 1m;
  
  server {
    listen       ${PORT} default_server;
    listen       [::]:${PORT} default_server;
    root         /usr/share/nginx/html;

    # I disbled caching so the browser won't cache the site.
    expires           0;
    add_header        Cache-Control private;
    
    # path not needing authentication
    location ^~ /b78292ec-175a-411d-ad1b-d9ab70e98a7e/ {
      proxy_pass ${REDIRECT_URI_SCHEME}://backend;
    }

    # all other locations need an authentication
    location ^~ / {
      access_by_lua_block {
        local opts = {
          redirect_uri = "${REDIRECT_URI}",
          discovery = "${DISCOVERY_URL}",
          -- configuration to authN towards the OIDC provider 
          client_id = "${CLIENT_ID}",
          client_secret = "${CLIENT_SECRET}",

          redirect_uri_scheme = "${REDIRECT_URI_SCHEME}",
          logout_path = "${LOGOUT_PATH}",
          redirect_after_logout_uri = "${AFTER_LOGOUT_URI}",
          redirect_after_logout_with_id_token_hint = false,
          -- post_logout_redirect_uri = "http://backend:8080/logoutSuccessful",
          session_contents = {id_token=true, access_token=true}
        }
        -- call introspect for OAuth 2.0 Bearer Access Token validation
        local res, err = require("resty.openidc").authenticate(opts)

        if err then
          ngx.status = 403
          ngx.say(err)
          ngx.exit(ngx.HTTP_FORBIDDEN)
        end
        -- forwarding token to backend
        ngx.req.set_header("Authorization", "Bearer " .. res.access_token)
      }
      proxy_pass ${REDIRECT_URI_SCHEME}://backend;
    }
  }
  upstream backend {
          server   ${BACKEND_HOST};
  }
}